/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooGenPdfPdf.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooGenPdfPdf); 

 RooGenPdfPdf::RooGenPdfPdf(const char *name, const char *title, 
                        RooAbsReal& _t,
                        RooAbsReal& _p,
                        RooAbsReal& _alpha,
                        RooAbsReal& _beta,
                        RooAbsReal& _gamma,
                        RooAbsReal& _scale) :
   RooAbsPdf(name,title), 
   t("t","t",this,_t),
   p("p","p",this,_p),
   alpha("alpha","alpha",this,_alpha),
   beta("beta","beta",this,_beta),
   gamma("gamma","gamma",this,_gamma),
   scale("scale","scale",this,_scale)
 { 
 } 


 RooGenPdfPdf::RooGenPdfPdf(const RooGenPdfPdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   t("t",this,other.t),
   p("p",this,other.p),
   alpha("alpha",this,other.alpha),
   beta("beta",this,other.beta),
   gamma("gamma",this,other.gamma),
   scale("scale",this,other.scale)
 { 
 } 



 Double_t RooGenPdfPdf::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return scale*(3./(4.*M_PI))*(0.5*(1.-alpha) + (0.5)*(3.*alpha-1)*cos(t)*cos(t) - beta*sin(t)*sin(t)*cos(2.*p)- sqrt(2.)*gamma*sin(2.*t)*cos(p)) ; 
 } 



